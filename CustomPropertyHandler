' Module: CustomPropertyHandler

Option Explicit

' Function to get or create an ItemTypeLibrary by name
Public Function GetItemTypeLibrary(Optional LibraryName As String = "ARES") As ItemTypeLibrary
    On Error GoTo ErrorHandler
    Dim ItemLibs As ItemTypeLibraries
    Dim ITL As ItemTypeLibrary
    
    ' Instantiate the ItemTypeLibraries collection
    Set ItemLibs = New ItemTypeLibraries
    
    ' Try to find the library by name
    Set ITL = ItemLibs.FindByName(LibraryName)
    
    ' If the library does not exist, create it
    If ITL Is Nothing Then
        Set GetItemTypeLibrary = CreateItemTypeLibrary(LibraryName)
    Else
        Set GetItemTypeLibrary = ITL
    End If
    
    Exit Function

ErrorHandler:
    Set GetItemTypeLibrary = Nothing
End Function

' Function to create a new ItemTypeLibrary and its associated ItemType
Private Function CreateItemTypeLibrary(Optional LibraryName As String = "ARES") As ItemTypeLibrary
    On Error GoTo ErrorHandler
    Dim Item As ItemType
    Dim ItemProp As ItemTypeProperty
    Dim ItemLibs As ItemTypeLibraries
    Dim ITL As ItemTypeLibrary
    
    ' Instantiate the ItemTypeLibraries collection
    Set ItemLibs = New ItemTypeLibraries
    
    ' Try to find the library by name
    Set ITL = ItemLibs.FindByName(LibraryName)
    
    ' If the library does not exist, create it
    If ITL Is Nothing Then
        'Create ItemType Library
        Set CreateItemTypeLibrary = ItemLibs.CreateLib(LibraryName, False)
        
        ' Create the ItemType within the library
        Set Item = CreateItemTypeLibrary.AddItemType("ARESAutoLengthObject")
        
        ' Add properties to the ItemType
        Set ItemProp = Item.AddProperty("EditedByARES", ItemPropertyTypeBoolean)
        Set ItemProp = Item.AddProperty("UpdatedString", ItemPropertyTypeString)
        Set ItemProp = Item.AddProperty("DateOfEdit", ItemPropertyTypeDateTime)
        
        ' Write the library to the DGN file
        CreateItemTypeLibrary.Write
    End If
    
    Exit Function

ErrorHandler:
    Set CreateItemTypeLibrary = Nothing
End Function

' Function to delete an ItemTypeLibrary by name
Private Function DeleteItemTypeLibrary(Optional LibraryName As String = "ARES") As Boolean
    On Error GoTo ErrorHandler
    Dim oItemLibs As ItemTypeLibraries
    Dim ITL As ItemTypeLibrary
    
    ' Initialize the return value to False
    DeleteItemTypeLibrary = False
    
    ' Instantiate the ItemTypeLibraries collection
    Set oItemLibs = New ItemTypeLibraries
    
    ' Try to find the library by name
    Set ITL = oItemLibs.FindByName("ARES")
    
    ' If the library exists, delete it
    If Not ITL Is Nothing Then
        ITL.DeleteLib
        DeleteItemTypeLibrary = True
    End If
    
    Exit Function

ErrorHandler:
    DeleteItemTypeLibrary = False
End Function

' Function to attach an ItemType to an Element
Public Function AttachItemToElement(ByVal El As Element, Optional LibraryName As String = "ARES") As Boolean
    'On Error GoTo ErrorHandler
    Dim ITL As ItemTypeLibrary
    Dim Item As ItemType
    Dim ItemPropHandler As ItemTypePropertyHandler
    Dim oDate As Date
    
    ' Initialize the return value to False
    AttachItemToElement = False
    
    ' Get the ItemTypeLibrary
    Set ITL = GetItemTypeLibrary(LibraryName)
    
    ' If the library exists, proceed
    If Not ITL Is Nothing Then
        ' Get the ItemType by name
        Set Item = ITL.GetItemTypeByName("ARESAutoLengthObject")
        
        ' If the ItemType exists, attach it to the Element
        If Not Item Is Nothing Then
            Set ItemPropHandler = Item.AttachItem(El)
            
            ' Set the properties of the attached ItemType
            ItemPropHandler.SetPropertyValue "ItemPropertyTypeBoolean", True
            ItemPropHandler.SetPropertyValue "ItemPropertyTypeString", ""
            ItemPropHandler.SetPropertyValue "DateOfEdit", ""
            
            ' Retrieve the DateOfEdit property value
            oDate = ItemPropHandler.GetPropertyValue("DateOfEdit")
            
            ' Set the return value to True if successful
            AttachItemToElement = True
        End If
    End If
    
    Exit Function
    
'ErrorHandler:
    'AttachItemToElement = False
End Function
Sub tt()
    'DeleteItemTypeLibrary
    'GetItemTypeLibrary
    Dim El As Element
    Set El = ActiveModelReference.GetElementByID(DLongFromLong(2149))
    AttachItemToElement El
End Sub
